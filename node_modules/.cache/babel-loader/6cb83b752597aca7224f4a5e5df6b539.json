{"remainingRequest":"C:\\gta go\\Gui\\node_modules\\thread-loader\\dist\\cjs.js!C:\\gta go\\Gui\\node_modules\\babel-loader\\lib\\index.js!C:\\gta go\\Gui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\gta go\\Gui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\gta go\\Gui\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\gta go\\Gui\\src\\App.vue","mtime":1687178511713},{"path":"C:\\gta go\\Gui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1685190017390},{"path":"C:\\gta go\\Gui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1685190017367},{"path":"C:\\gta go\\Gui\\node_modules\\babel-loader\\lib\\index.js","mtime":1685190019507},{"path":"C:\\gta go\\Gui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1685190017390},{"path":"C:\\gta go\\Gui\\node_modules\\vue-loader\\lib\\index.js","mtime":1685190022137}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}