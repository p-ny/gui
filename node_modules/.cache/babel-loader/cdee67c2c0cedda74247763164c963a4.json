{"remainingRequest":"D:\\downloads\\UNIQ\\Gui\\node_modules\\thread-loader\\dist\\cjs.js!D:\\downloads\\UNIQ\\Gui\\node_modules\\babel-loader\\lib\\index.js!D:\\downloads\\UNIQ\\Gui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\downloads\\UNIQ\\Gui\\src\\store\\hud\\index.js","dependencies":[{"path":"D:\\downloads\\UNIQ\\Gui\\src\\store\\hud\\index.js","mtime":1688642317210},{"path":"D:\\downloads\\UNIQ\\Gui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1685190017390},{"path":"D:\\downloads\\UNIQ\\Gui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1685190017367},{"path":"D:\\downloads\\UNIQ\\Gui\\node_modules\\babel-loader\\lib\\index.js","mtime":1685190019507},{"path":"D:\\downloads\\UNIQ\\Gui\\node_modules\\eslint-loader\\index.js","mtime":1685190018634}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCB3YXJGb3JFbnRlcnByaWNlIGZyb20gJy4vbW9kdWxlcy93YXItZm9yLWVudGVycHJpY2UnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZXNwYWNlZDogdHJ1ZSwKICBzdGF0ZTogewogICAgaGVscFNob3c6IHRydWUsCiAgICBhbW1vOiAwLAogICAgbWFtbW86IDAsCiAgICBtb25leTogMCwKICAgIG1vbmV5Q2hhbmdlOiAwLAogICAgYmFuazogMCwKICAgIG1pYzogZmFsc2UsCiAgICB2b2ljZVN0YXRlOiAwLAogICAgc3BlYWtJdGVtczogW10sCiAgICBtaW5pbWFwOiB7CiAgICAgIC8vINCyINC00L7Qu9GP0YUg0L7RgiDRjdC60YDQsNC90LAgKNC/0L4g0YUg0YHQu9C10LLQsCDQv9C+IHkg0YHQstGD0YDRhdGDKQogICAgICB3aWR0aDogMC4yLAogICAgICBoZWlnaHQ6IDAsCiAgICAgIHNjYWxlWDogMCwKICAgICAgc2NhbGVZOiAwLAogICAgICBsZWZ0WDogMC4wNSwKICAgICAgYm90dG9tWTogMC45OCwKICAgICAgdG9wWTogMC43OCwKICAgICAgcmlnaHRYOiAwLjIKICAgIH0sCiAgICBhcnRpbWVyOiB1bmRlZmluZWQsCiAgICByZWFsU3BlYWtJdGVtczogW10sCiAgICB0aW1lOiAiMTI6MzMiLAogICAgZGF0ZTogIjI1LjA4LjIwMjMiLAogICAgaHVkU2hvdzogdHJ1ZSwKICAgIGlkOiA3MTMsCiAgICBvbmxpbmU6IDEyMzMsCiAgICBpc0tpbGxvZzogZmFsc2UsCiAgICBpc0dyZWVuWm9uZTogZmFsc2UsCiAgICB3YW50ZWRMZXZlbHM6IDAsCiAgICBwcm9tcHREYXRhOiB7CiAgICAgIHNob3c6IGZhbHNlLAogICAgICAvL25uCiAgICAgIGl0ZW1zOiBbewogICAgICAgIGtleTogJ0UnLAogICAgICAgIHRleHQ6ICdzb21lIHRldHgnCiAgICAgIH0sIHsKICAgICAgICBrZXk6ICdJJywKICAgICAgICB0ZXh0OiAnYml6aGVscF8xJwogICAgICB9LCB7CiAgICAgICAga2V5OiAnSScsCiAgICAgICAgdGV4dDogJ9Cn0YLQvtCx0Ysg0L7RgtC60YDRi9GC0Ywg0LjQvdGE0L7Qv9Cw0L3QtdC70YwnCiAgICAgIH1dCiAgICB9LAogICAgcmVwb3J0c0NvdW50OiBudWxsLAogICAgLy8gQ0hJUFMKICAgIGlzQ2hpcHNMaXN0OiB0cnVlLAogICAgY2hpcHNMaXN0OiB7CiAgICAgICdibGFjayc6IDAsCiAgICAgICdyZWQnOiAwLAogICAgICAnYmx1ZSc6IDAsCiAgICAgICdncmVlbic6IDAsCiAgICAgICd5ZWxsb3cnOiAwCiAgICB9LAogICAgLy8gS0lMTFNUQVQKICAgIGlzS2lsbHN0YXQ6IHRydWUsCiAgICBraWxsc3RhdEl0ZW1zOiBbewogICAgICBpZDogMSwKICAgICAgdXNlcm5hbWU6ICJCcmlhbiBTbWl0aCIsCiAgICAgIGtpbGxzOiAwLAogICAgICBkZWF0aHM6IDIKICAgIH0gLy8geyBpZDogNCwgdXNlcm5hbWU6ICJCcmlhbiBTbWl0aCIsIGtpbGxzOiAyLCBkZWF0aHM6IDAgfSwKICAgIC8vIHsgaWQ6IDUsIHVzZXJuYW1lOiAiTHlsZSBLYXVmZm1hbiIsIGtpbGxzOiAxMSwgZGVhdGhzOiA3IH0KICAgIC8vINCU0JvQryDQk9Cb0J7QkdCQ0JvQkCAKICAgIC8veyBpZDogNSwgdXNlcm5hbWU6ICJMeWxlIEthdWZmbWFuIiwgcG9pbnRzOiAxMiwgcGxhY2U6MSB9CiAgICBdLAogICAga2lsbHN0YXRUeXBlOiAnJywKICAgIC8vIG1hdGNoX3Jlc3VsdCwgZ2xvYmFsX3JhdGluZywgJycKICAgIHNvcnRLaWxsc3RhdEl0ZW1zOiBbXSwKICAgIGtpbGxzdGF0Q3VycmVudFVzZXI6IHsKICAgICAgaWQ6IDQsCiAgICAgIHVzZXJuYW1lOiAiQnJpYW4gU21pdGgiLAogICAgICBraWxsczogNDEsCiAgICAgIGRlYXRoczogMwogICAgfSwKICAgIGtpbGxTdGF0VGltZTogbnVsbCwKICAgIGtpbGxTdGF0VGltZXI6IG51bGwsCiAgICBpc1ZvdGU6IGZhbHNlLAogICAgaXNGdWxsS2lsbHN0YXQ6IGZhbHNlLAogICAgdm90ZUl0ZW1zOiBbewogICAgICB0aXRsZTogJ1JlY3ljbGluZycsCiAgICAgIGN1cnJlbnRDb3VudDogMCwKICAgICAgbWF4Q291bnQ6IDUwCiAgICB9LCB7CiAgICAgIHRpdGxlOiAnQ2FtcCcsCiAgICAgIGN1cnJlbnRDb3VudDogMCwKICAgICAgbWF4Q291bnQ6IDUwCiAgICB9LCB7CiAgICAgIHRpdGxlOiAnU2F3bWlsbCcsCiAgICAgIGN1cnJlbnRDb3VudDogMCwKICAgICAgbWF4Q291bnQ6IDUwCiAgICB9XSwKICAgIC8vIFdPUksgVElNRVIKICAgIHdvcmtUaW1lOiBudWxsLAogICAgd29ya1RpbWVyOiBudWxsLAogICAgLy8gQ0FQVFVSRQogICAgaXNDYXB0dXJlSXRlbXM6IGZhbHNlLAogICAgLy9ubgogICAgY2FwdHVyZVRlYW1zOiBbewogICAgICBpZDogMCwKICAgICAga2V5OiAnYmxvb2RzJywKICAgICAgdGl0bGU6ICdCbG9vZCBzdHJlZXQnLAogICAgICBwbGF5ZXJzOiAwCiAgICB9LCB7CiAgICAgIGlkOiAxLAogICAgICBrZXk6ICdiYWxsYXMnLAogICAgICB0aXRsZTogJ0JhbGxhcyBnYW5nJywKICAgICAgcGxheWVyczogMAogICAgfV0sCiAgICBpc0NhcHR1cmVMb2c6IGZhbHNlLAogICAgY2FwdHVyZUxvZzogWy8vIHsga2lsbGVyTmFtZTogIktpbGxlcl9uYW1lIiwga2lsbGVyRnJhY3Rpb246ICdibG9vZHMnLCBkZWNlYXNlZEZyYWN0aW9uOiAnYmFsbGFzJywgZGVjZWFzZWROYW1lOiAiUGxheWVyX05hbWUiLCB3ZWFwb25JZDogMTAzIH0sCiAgICAgIC8vIHsga2lsbGVyTmFtZTogIktpbGxlcl9uYW1lIiwga2lsbGVyRnJhY3Rpb246ICduZXV0cmFsJywgZGVjZWFzZWRGcmFjdGlvbjogJ2JhbGxhcycsIGRlY2Vhc2VkTmFtZTogIlBsYXllcl9OYW0iLCB3ZWFwb25JZDogMTEzIH0sCiAgICAgIC8vIHsga2lsbGVyTmFtZTogIktpbGxlcl9uYW1lIiwga2lsbGVyRnJhY3Rpb246ICdibG9vZHMnLCBkZWNlYXNlZEZyYWN0aW9uOiAnYmFsbGFzJywgZGVjZWFzZWROYW1lOiAiUGxheWVyX05tZSIsIHdlYXBvbklkOiAxMjMgfSwKICAgICAgLy8geyBraWxsZXJOYW1lOiBudWxsLCBraWxsZXJGcmFjdGlvbjogbnVsbCwgZGVjZWFzZWRGcmFjdGlvbjogJ2JhbGxhcycsIGRlY2Vhc2VkTmFtZTogIlBsYXllcl9hbWUiLCB3ZWFwb25JZDogOTkgfSwKICAgICAgLy8geyBraWxsZXJOYW1lOiAiS2lsbGVyX25hbWUiLCBraWxsZXJGcmFjdGlvbjogJ2Jsb29kcycsIGRlY2Vhc2VkRnJhY3Rpb246ICdiYWxsYXMnLCBkZWNlYXNlZE5hbWU6ICJQbGFlcl9OYW1lIiwgd2VhcG9uSWQ6IDE0MyB9CiAgICBdLAogICAgY2FwdHVyZVRpbWVyOiBudWxsLAogICAgY2FwdHVyZVRpbWVMaW1pdDogNjAwLAogICAgY2FwdHVyZVRpbWVDdXJyZW50OiAyLAogICAgc3RhdHVzRGlzcGxheVNob3c6IHRydWUsCiAgICBzdGF0dXNEaXNwbGF5czogewogICAgICBodW5nZXJMZXZlbDogMzEsCiAgICAgIHRoaXJzdExldmVsOiAxMCwKICAgICAgcmVzdExldmVsOiAxMDAsCiAgICAgIGpveUxldmVsOiAxMDAKICAgIH0sCiAgICB1bnRpbENhcHR1cmVUaW1lck1heFRpbWU6IDIwMCwKICAgIHVudGlsQ2FwdHVyZVRpbWVyQ3VycmVudFRpbWU6IDc1LAogICAgdW50aWxDYXB0dXJlVGltZXJFbmFibGVkOiBmYWxzZSwKICAgIC8vbm4KICAgIHVudGlsQ2FwdHVyZVRpbWVyTWVzc2FnZTogJycsCiAgICBub3RpZmljYXRpb25UZXh0OiAn0LLRiyDRg9GB0L/QtdGI0L3QviDRgdC00LDQu9C4INC90LAg0L/RgNCw0LLQsNCy0Ysg0YPRgdC/0LXRiNC90L4g0YHQtNCw0LvQuCDQvdCwINC/0YDQsNCy0LAg0LLRiyDRg9GB0L/QtdGI0L3QviDRgdC00LDQu9C4JywKICAgIG5vdGlmaWNhdGlvblNob3c6IGZhbHNlLAogICAgZHJpZnRTY29yZTogewogICAgICBzaG93OiBmYWxzZSwKICAgICAgLy9ubgogICAgICB2YWx1ZTogMTMwMCwKICAgICAgZmFjdG9yOiAyNCwKICAgICAgLy8gcm90YXRlRGVnINC80LDQutGB0LjQvNGD0LwgMzAsINC80LjQvdC40LzRg9C8IC0zMAogICAgICByb3RhdGVEZWc6IDI5CiAgICB9LAogICAgbGV2ZWxVcDogewogICAgICBzaG93OiBmYWxzZSwKICAgICAgLy9ubgogICAgICBjdXJyZW50TGV2ZWw6IDEyLAogICAgICBjdXJyZW50RXhwOiAxMCwKICAgICAgbWF4RXhwOiAzLAogICAgICBleHA6IDIwCiAgICB9LAogICAgdGlwOiB7CiAgICAgIHNob3c6IGZhbHNlLAogICAgICB0ZXh0OiAn0J/RgNC40LzQtdGAINGB0L7QvtCx0YnQtdC90LjRjyDQuNCz0YDQvtC60YMnCiAgICB9LAogICAgcGhhc2VUaW1lcjogewogICAgICBzaG93OiBmYWxzZSwKICAgICAgdGl0bGU6ICdQaGFzZSAyJywKICAgICAgdGltZTogMTQwMCwKICAgICAgYWxpdmU6IDUwLAogICAgICBraWxsczogMAogICAgfSwKICAgIHdpbk5vdGlmaWNhdGlvbjogewogICAgICBzaG93OiBmYWxzZSwKICAgICAgbmlja25hbWU6ICdWYXN5YSBQdXBraW4nLAogICAgICBpdGVtSWQ6IDQwMDYKICAgIH0sCiAgICByZW1vdGVDb250cm9sbGVyOiB7CiAgICAgIHNob3c6IGZhbHNlLAogICAgICB2ZWhpY2xlSWQ6IDAsCiAgICAgIGJhY2tMZWZ0RG9vcjogZmFsc2UsCiAgICAgIGJhY2tSaWdodERvb3I6IGZhbHNlLAogICAgICBmcm9udExlZnREb29yOiBmYWxzZSwKICAgICAgZnJvbnRSaWdodERvb3I6IGZhbHNlLAogICAgICBob29kOiBmYWxzZSwKICAgICAgdHJ1bms6IGZhbHNlLAogICAgICBiaWJpOiBmYWxzZSwKICAgICAgYWltOiBmYWxzZSwKICAgICAgZXZhY3VhdGlvbjogZmFsc2UsCiAgICAgIGVuZ2luZTogZmFsc2UsCiAgICAgIHNpZ25hbGl6YXRpb246IGZhbHNlLAogICAgICBjZW50cmFsTG9jazogZmFsc2UKICAgIH0sCiAgICB3YXJab25lOiB7CiAgICAgIHNob3c6IGZhbHNlLAogICAgICBrZXk6IDIwCiAgICB9LAogICAgaG9sZUluZm9ybWF0aW9uOiB7CiAgICAgIHNob3c6IGZhbHNlLAogICAgICBpdGVtSW5mbzogewogICAgICAgIGlzTXk6IHRydWUsCiAgICAgICAgbmFtZTogJ9Cf0L7QvNC40LTQvtGAJywKICAgICAgICBpY29uOiAndG9tYXRvLnBuZycsCiAgICAgICAgaXNXYXRlcmVkOiB0cnVlLAogICAgICAgIGZlcnRpbGl6ZXI6ICfQotC+0L/QvtCy0L7QtScsCiAgICAgICAgaG9sZTogJ9CR0YvRgdGC0YDQsNGPJwogICAgICB9LAogICAgICBzdGF0ZUluZm86IHsKICAgICAgICBzaG93OiB0cnVlLAogICAgICAgIGlzV2l0aGVyczogdHJ1ZSwKICAgICAgICB2YWx1ZTogMTIwLAogICAgICAgIG1heFZhbHVlOiAxODAKICAgICAgfQogICAgfSwKICAgIHRyYW5zZmVyUmVwb3J0OiB7CiAgICAgIHNob3c6IHRydWUsCiAgICAgIG1heFJlcG9ydHM6IDUwCiAgICB9LAogICAgYmlnaW5mbzogbnVsbAogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzaG93QmlnSW5mbzogZnVuY3Rpb24gc2hvd0JpZ0luZm8oc3RhdGUsIGluZm8pIHsKICAgICAgc3RhdGUuYmlnaW5mbyA9IGluZm87CiAgICB9LAogICAgaGlkZUJpZ0luZm86IGZ1bmN0aW9uIGhpZGVCaWdJbmZvKHN0YXRlKSB7CiAgICAgIHN0YXRlLmJpZ2luZm8gPSBudWxsOwogICAgfSwKICAgIHRvZ2dsZVRpcDogZnVuY3Rpb24gdG9nZ2xlVGlwKHN0YXRlLCBwYXlsb2FkKSB7CiAgICAgIHN0YXRlLnRpcC5zaG93ID0gcGF5bG9hZDsKICAgIH0sCiAgICBzZXRUaXBUZXh0OiBmdW5jdGlvbiBzZXRUaXBUZXh0KHN0YXRlLCBfcmVmKSB7CiAgICAgIHZhciB0ZXh0ID0gX3JlZi50ZXh0OwogICAgICBzdGF0ZS50aXAudGV4dCA9IHRleHQ7CiAgICB9LAogICAgc2V0TWluaW1hcFNpemU6IGZ1bmN0aW9uIHNldE1pbmltYXBTaXplKHN0YXRlLCBwYXlsb2FkKSB7CiAgICAgIHN0YXRlLm1pbmltYXAgPSBwYXlsb2FkOwogICAgfSwKICAgIGFkZEtpbGxvZ0l0ZW06IGZ1bmN0aW9uIGFkZEtpbGxvZ0l0ZW0oc3RhdGUsIGl0ZW0pIHsKICAgICAgaWYgKHN0YXRlLmtpbGxvZ0l0ZW1zLmxlbmd0aCA+PSA1KSB7CiAgICAgICAgc3RhdGUua2lsbG9nSXRlbXMuc3BsaWNlKDAsIDEpOwogICAgICAgIHN0YXRlLmtpbGxvZ0l0ZW1zLnB1c2goaXRlbSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RhdGUua2lsbG9nSXRlbXMucHVzaChpdGVtKTsKICAgICAgfQogICAgfSwKICAgIHJlc2V0QXJyZXN0VGltZXI6IGZ1bmN0aW9uIHJlc2V0QXJyZXN0VGltZXIoc3RhdGUpIHsKICAgICAgc3RhdGUuYXJ0aW1lciA9IHVuZGVmaW5lZDsKICAgIH0sCiAgICBzZXRBcnJlc3RUaW1lcjogZnVuY3Rpb24gc2V0QXJyZXN0VGltZXIoc3RhdGUsIF9yZWYyKSB7CiAgICAgIHZhciB0aW1lID0gX3JlZjIudGltZSwKICAgICAgICAgIHJlYXNvbiA9IF9yZWYyLnJlYXNvbjsKICAgICAgc3RhdGUuYXJ0aW1lciA9IHsKICAgICAgICBleHBpcmllZDogbmV3IERhdGUodGltZSArICIgVVRDIiksCiAgICAgICAgcmVhc29uOiByZWFzb24KICAgICAgfTsKICAgIH0sCiAgICByZXNldEtpbGxvZzogZnVuY3Rpb24gcmVzZXRLaWxsb2coc3RhdGUpIHsKICAgICAgc3RhdGUua2lsbG9nSXRlbXMgPSBbXTsKICAgIH0sCiAgICBzaG93S2lsbG9nOiBmdW5jdGlvbiBzaG93S2lsbG9nKHN0YXRlLCB2YWwpIHsKICAgICAgc3RhdGUuaXNLaWxsb2cgPSB2YWw7CiAgICB9LAogICAgc2V0Vm9pY2VTdGF0ZTogZnVuY3Rpb24gc2V0Vm9pY2VTdGF0ZShzdGF0ZSwgdmFsKSB7CiAgICAgIHN0YXRlLnZvaWNlU3RhdGUgPSB2YWw7CiAgICB9LAogICAgdG9nZ2xlR3JlZW5ab25lOiBmdW5jdGlvbiB0b2dnbGVHcmVlblpvbmUoc3RhdGUsIHRvZ2dsZSkgewogICAgICBzdGF0ZS5pc0dyZWVuWm9uZSA9IHRvZ2dsZTsKICAgIH0sCiAgICB0b2dnbGVMZXZlbFVwU2hvdzogZnVuY3Rpb24gdG9nZ2xlTGV2ZWxVcFNob3coc3RhdGUsIHRvZ2dsZSkgewogICAgICBzdGF0ZS5sZXZlbFVwLnNob3cgPSB0b2dnbGU7CiAgICB9LAogICAgc2V0TGV2ZWxVcDogZnVuY3Rpb24gc2V0TGV2ZWxVcChzdGF0ZSwgX3JlZjMpIHsKICAgICAgdmFyIGx2bCA9IF9yZWYzLmx2bCwKICAgICAgICAgIGV4cCA9IF9yZWYzLmV4cDsKICAgICAgc3RhdGUubGV2ZWxVcC5jdXJyZW50TGV2ZWwgPSBsdmw7CiAgICAgIHN0YXRlLmxldmVsVXAuY3VycmVudEV4cCA9IGV4cDsKICAgICAgc3RhdGUubGV2ZWxVcC5tYXhFeHAgPSAzICsgc3RhdGUubGV2ZWxVcC5jdXJyZW50TGV2ZWwgKiAzOwogICAgfSwKICAgIHNldExldmVsOiBmdW5jdGlvbiBzZXRMZXZlbChzdGF0ZSwgbHZsKSB7CiAgICAgIHN0YXRlLmxldmVsVXAubWF4RXhwID0gMyArIHN0YXRlLmxldmVsVXAuY3VycmVudExldmVsICogMzsKICAgICAgc3RhdGUubGV2ZWxVcC5leHAgPSAwOwogICAgICBzdGF0ZS5sZXZlbFVwLmN1cnJlbnRFeHAgPSAwOwogICAgICBzdGF0ZS5sZXZlbFVwLmN1cnJlbnRMZXZlbCA9IGx2bDsKICAgIH0sCiAgICBzZXROZXh0RXhwOiBmdW5jdGlvbiBzZXROZXh0RXhwKHN0YXRlLCBleHApIHsKICAgICAgc3RhdGUubGV2ZWxVcC5leHAgPSBleHAgLSBzdGF0ZS5sZXZlbFVwLmN1cnJlbnRFeHA7CiAgICAgIHN0YXRlLmxldmVsVXAuY3VycmVudEV4cCA9IGV4cDsKICAgIH0sCgogICAgLyogU3BlYWtlciBtZXRob2RzICovCiAgICBhZGRTcGVha0l0ZW06IGZ1bmN0aW9uIGFkZFNwZWFrSXRlbShzdGF0ZSwgX3JlZjQpIHsKICAgICAgdmFyIGlkID0gX3JlZjQuaWQsCiAgICAgICAgICBuYW1lID0gX3JlZjQubmFtZTsKICAgICAgdmFyIGl0ZW0gPSB7CiAgICAgICAgaWQ6IGlkLAogICAgICAgIG5hbWU6IG5hbWUKICAgICAgfTsKICAgICAgdmFyIHJpZ2h0SW5kZXggPSBzdGF0ZS5yZWFsU3BlYWtJdGVtcy5maW5kSW5kZXgoZnVuY3Rpb24gKGkpIHsKICAgICAgICByZXR1cm4gaS5pZCA9PT0gaXRlbS5pZDsKICAgICAgfSk7CiAgICAgIGlmIChyaWdodEluZGV4ID4gLTEpIHJldHVybjsKICAgICAgc3RhdGUucmVhbFNwZWFrSXRlbXMucHVzaChpdGVtKTsKICAgICAgc3RhdGUuc3BlYWtJdGVtcyA9IHN0YXRlLnJlYWxTcGVha0l0ZW1zLnNsaWNlKDAsIDUpOwogICAgfSwKICAgIHJlbW92ZVNwZWFrSXRlbTogZnVuY3Rpb24gcmVtb3ZlU3BlYWtJdGVtKHN0YXRlLCBpZCkgewogICAgICB2YXIgcmlnaHRJbmRleCA9IHN0YXRlLnJlYWxTcGVha0l0ZW1zLmZpbmRJbmRleChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtLmlkID09PSBpZDsKICAgICAgfSk7CiAgICAgIGlmIChyaWdodEluZGV4ID09PSAtMSkgcmV0dXJuOwogICAgICBzdGF0ZS5yZWFsU3BlYWtJdGVtcy5zcGxpY2UocmlnaHRJbmRleCwgMSk7CiAgICAgIHN0YXRlLnNwZWFrSXRlbXMgPSBzdGF0ZS5yZWFsU3BlYWtJdGVtcy5zbGljZSgwLCA1KTsKICAgIH0sCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0gLy8KICAgIHNldFRpbWU6IGZ1bmN0aW9uIHNldFRpbWUoc3RhdGUsIF9yZWY1KSB7CiAgICAgIHZhciB0aW1lID0gX3JlZjUudGltZSwKICAgICAgICAgIGRhdGUgPSBfcmVmNS5kYXRlOwogICAgICBzdGF0ZS50aW1lID0gdGltZTsKICAgICAgc3RhdGUuZGF0ZSA9IGRhdGU7CiAgICB9LAogICAgdXBkYXRlRGF0YTogZnVuY3Rpb24gdXBkYXRlRGF0YShzdGF0ZSwgX3JlZjYpIHsKICAgICAgdmFyIG5hbWUgPSBfcmVmNi5uYW1lLAogICAgICAgICAgdmFsdWUgPSBfcmVmNi52YWx1ZTsKCiAgICAgIC8vd2luZG93LmNvbnNvbGUubG9nKGBDaGVjayAke25hbWV9IC0gJHt2YWx1ZX1gKQogICAgICBpZiAobmFtZSA9PT0gJ21vbmV5JykgewogICAgICAgIHN0YXRlLm1vbmV5Q2hhbmdlID0gdmFsdWUgLSBzdGF0ZS5tb25leTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHN0YXRlLm1vbmV5Q2hhbmdlID0gMDsKICAgICAgICB9LCA0MDAwKTsKICAgICAgICBzdGF0ZS5tb25leSA9IHBhcnNlSW50KHZhbHVlKTsKICAgICAgfSBlbHNlIGlmIChzdGF0ZVtuYW1lXSAhPSB1bmRlZmluZWQpIHN0YXRlW25hbWVdID0gdmFsdWU7CiAgICB9LAogICAgc2hvd0hlbHA6IGZ1bmN0aW9uIHNob3dIZWxwKHN0YXRlLCB2YWx1ZSkgewogICAgICB2YWx1ZSA9IGZhbHNlOwogICAgICBzdGF0ZS5oZWxwU2hvdyA9IHZhbHVlOwogICAgfSwKICAgIHNob3dIdWQ6IGZ1bmN0aW9uIHNob3dIdWQoc3RhdGUsIHZhbHVlKSB7CiAgICAgIHN0YXRlLmh1ZFNob3cgPSB2YWx1ZTsKICAgIH0sCiAgICBzZXRQcm9tcHREYXRhOiBmdW5jdGlvbiBzZXRQcm9tcHREYXRhKHN0YXRlLCBkYXRhKSB7CiAgICAgIHN0YXRlLnByb21wdERhdGEgPSBkYXRhOwogICAgfSwKICAgIHNldEtpbGxzdGF0SXRlbXM6IGZ1bmN0aW9uIHNldEtpbGxzdGF0SXRlbXMoc3RhdGUsIGl0ZW1zKSB7CiAgICAgIHZhciByaWdodEl0ZW1zID0gaXRlbXMuc29ydChzb3J0RnVuYyk7CgogICAgICBmdW5jdGlvbiBzb3J0RnVuYyhhLCBiKSB7CiAgICAgICAgaWYgKGIua2lsbHMgPT09IGEua2lsbHMpIHsKICAgICAgICAgIHJldHVybiBhLmRlYXRocyAtIGIuZGVhdGhzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gYi5raWxscyAtIGEua2lsbHM7CiAgICAgICAgfQogICAgICB9CgogICAgICBzdGF0ZS5raWxsc3RhdEl0ZW1zID0gcmlnaHRJdGVtczsKICAgIH0sCiAgICBzZXRLaWxsc3RhdFR5cGU6IGZ1bmN0aW9uIHNldEtpbGxzdGF0VHlwZShzdGF0ZSwgdHlwZSkgewogICAgICBzdGF0ZS5raWxsc3RhdFR5cGUgPSB0eXBlLnZhbHVlOwogICAgfSwKICAgIHNldEtpbGxzdGF0Q3VycmVudFVzZXI6IGZ1bmN0aW9uIHNldEtpbGxzdGF0Q3VycmVudFVzZXIoc3RhdGUsIHVzZXIpIHsKICAgICAgc3RhdGUua2lsbHN0YXRDdXJyZW50VXNlciA9IHVzZXI7CiAgICB9LAogICAgc3RhcnRLaWxsc3RhdFRpbWVyOiBmdW5jdGlvbiBzdGFydEtpbGxzdGF0VGltZXIoc3RhdGUsIHZhbHVlKSB7CiAgICAgIHN0YXRlLmtpbGxTdGF0VGltZSA9IHZhbHVlOwoKICAgICAgaWYgKCFzdGF0ZS5raWxsU3RhdFRpbWVyKSB7CiAgICAgICAgc3RhdGUua2lsbFN0YXRUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmIChzdGF0ZS5raWxsU3RhdFRpbWUgPiAwKSB7CiAgICAgICAgICAgIHN0YXRlLmtpbGxTdGF0VGltZS0tOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzdGF0ZS5raWxsU3RhdFRpbWVyKTsKICAgICAgICAgICAgc3RhdGUua2lsbFN0YXRUaW1lciA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfSwgMTAwMCk7CiAgICAgIH0KICAgIH0sCiAgICBzdG9wS2lsbHN0YXRUaW1lcjogZnVuY3Rpb24gc3RvcEtpbGxzdGF0VGltZXIoc3RhdGUpIHsKICAgICAgY2xlYXJJbnRlcnZhbChzdGF0ZS5raWxsU3RhdFRpbWVyKTsKICAgICAgc3RhdGUua2lsbFN0YXRUaW1lID0gbnVsbDsKICAgICAgc3RhdGUua2lsbFN0YXRUaW1lciA9IG51bGw7CiAgICB9LAogICAgc2V0SXNLaWxsU3RhdDogZnVuY3Rpb24gc2V0SXNLaWxsU3RhdChzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUuaXNLaWxsc3RhdCA9IHZhbHVlOwogICAgfSwKICAgIHNldElzRnVsbEtpbGxTdGF0OiBmdW5jdGlvbiBzZXRJc0Z1bGxLaWxsU3RhdChzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUuaXNGdWxsS2lsbHN0YXQgPSB2YWx1ZTsKICAgIH0sCiAgICBzZXRWb3RlSXRlbXM6IGZ1bmN0aW9uIHNldFZvdGVJdGVtcyhzdGF0ZSwgaXRlbXMpIHsKICAgICAgc3RhdGUudm90ZUl0ZW1zID0gaXRlbXM7CiAgICB9LAogICAgc2V0SXNWb3RlOiBmdW5jdGlvbiBzZXRJc1ZvdGUoc3RhdGUsIHZhbHVlKSB7CiAgICAgIHN0YXRlLmlzVm90ZSA9IHZhbHVlOwogICAgfSwKICAgIHN0YXJ0V29ya1RpbWVyOiBmdW5jdGlvbiBzdGFydFdvcmtUaW1lcihzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUud29ya1RpbWUgPSB2YWx1ZTsKICAgICAgc3RhdGUud29ya1RpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChzdGF0ZS53b3JrVGltZSA+IDApIHsKICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXRlLndvcmtUaW1lcik7CiAgICAgICAgICBzdGF0ZS53b3JrVGltZS0tOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjbGVhckludGVydmFsKHN0YXRlLndvcmtUaW1lcik7CiAgICAgICAgICBzdGF0ZS53b3JrVGltZXIgPSBudWxsOwogICAgICAgICAgc3RhdGUud29ya1RpbWUgPSBudWxsOwogICAgICAgIH0KICAgICAgfSwgMTAwMCk7CiAgICB9LAogICAgc3RvcFdvcmtUaW1lcjogZnVuY3Rpb24gc3RvcFdvcmtUaW1lcihzdGF0ZSkgewogICAgICBjbGVhckludGVydmFsKHN0YXRlLndvcmtUaW1lcik7CiAgICAgIHN0YXRlLndvcmtUaW1lciA9IG51bGw7CiAgICAgIHN0YXRlLndvcmtUaW1lID0gbnVsbDsKICAgIH0sCiAgICBzZXRXYW50ZWRMZXZlbHM6IGZ1bmN0aW9uIHNldFdhbnRlZExldmVscyhzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUud2FudGVkTGV2ZWxzID0gdmFsdWU7CiAgICB9LAogICAgLy8gU0VUIENISVBTIExJU1QgSVRFTQogICAgc2V0Q2hpcFZhbHVlOiBmdW5jdGlvbiBzZXRDaGlwVmFsdWUoc3RhdGUsIF9yZWY3KSB7CiAgICAgIHZhciB0eXBlID0gX3JlZjcudHlwZSwKICAgICAgICAgIHZhbHVlID0gX3JlZjcudmFsdWU7CiAgICAgIHN0YXRlLmNoaXBzTGlzdFt0eXBlXSA9IHZhbHVlOwogICAgfSwKICAgIHN1YkNoaXBWYWx1ZTogZnVuY3Rpb24gc3ViQ2hpcFZhbHVlKHN0YXRlLCB0eXBlKSB7CiAgICAgIHN0YXRlLmNoaXBzTGlzdFt0eXBlXSAtPSAxOwogICAgfSwKICAgIHNldElzQ2hpcHNMaXN0OiBmdW5jdGlvbiBzZXRJc0NoaXBzTGlzdChzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUuaXNDaGlwc0xpc3QgPSB2YWx1ZTsKICAgIH0sCiAgICAvLyBDQVBUVVJFCiAgICBhcHBlbmRDYXB0dXJlTG9nOiBmdW5jdGlvbiBhcHBlbmRDYXB0dXJlTG9nKHN0YXRlLCBpdGVtKSB7CiAgICAgIGlmIChzdGF0ZS5jYXB0dXJlTG9nLmxlbmd0aCA+PSA1KSB7CiAgICAgICAgc3RhdGUuY2FwdHVyZUxvZy5zaGlmdCgpOwogICAgICB9CgogICAgICBzdGF0ZS5jYXB0dXJlTG9nLnB1c2goaXRlbSk7CiAgICB9LAogICAgc2V0SXNDYXB0dXJlTG9nOiBmdW5jdGlvbiBzZXRJc0NhcHR1cmVMb2coc3RhdGUsIHZhbHVlKSB7CiAgICAgIHN0YXRlLmlzQ2FwdHVyZUxvZyA9IHZhbHVlOwogICAgfSwKICAgIHJlc2V0Q2FwdHVyZUxvZ0l0ZW1zOiBmdW5jdGlvbiByZXNldENhcHR1cmVMb2dJdGVtcyhzdGF0ZSkgewogICAgICBzdGF0ZS5jYXB0dXJlTG9nID0gW107CiAgICB9LAogICAgc2V0Q2FwdHVyZVRlYW1zOiBmdW5jdGlvbiBzZXRDYXB0dXJlVGVhbXMoc3RhdGUsIHRlYW1zKSB7CiAgICAgIHN0YXRlLmNhcHR1cmVUZWFtcyA9IHRlYW1zOwogICAgfSwKICAgIHNldENhcHR1cmVUZWFtUGxheWVyczogZnVuY3Rpb24gc2V0Q2FwdHVyZVRlYW1QbGF5ZXJzKHN0YXRlLCBfcmVmOCkgewogICAgICB2YXIgdGVhbSA9IF9yZWY4LnRlYW0sCiAgICAgICAgICB2YWx1ZSA9IF9yZWY4LnZhbHVlOwogICAgICB2YXIgcmlndGhJbmRleCA9IHN0YXRlLmNhcHR1cmVUZWFtcy5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5rZXkgPT09IHRlYW07CiAgICAgIH0pOwogICAgICBzdGF0ZS5jYXB0dXJlVGVhbXNbcmlndGhJbmRleF0ucGxheWVycyA9IHZhbHVlOwogICAgfSwKICAgIHNldElzQ2FwdHVyZUl0ZW1zOiBmdW5jdGlvbiBzZXRJc0NhcHR1cmVJdGVtcyhzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUuaXNDYXB0dXJlSXRlbXMgPSB2YWx1ZTsKICAgIH0sCiAgICBzZXRDYXB0dXJlQ3VycmVudFRpbWU6IGZ1bmN0aW9uIHNldENhcHR1cmVDdXJyZW50VGltZShzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUuY2FwdHVyZVRpbWVDdXJyZW50ID0gdmFsdWU7CiAgICB9LAogICAgLy8gc3RhcnRDYXB0dXJlVGltZXI6IGZ1bmN0aW9uKHN0YXRlLCB7IGxpbWl0LCBjdXJyZW50IH0pIHsKICAgIC8vICAgICBzdGF0ZS5jYXB0dXJlVGltZUxpbWl0ID0gbGltaXQKICAgIC8vICAgICBzdGF0ZS5jYXB0dXJlVGltZUN1cnJlbnQgPSBjdXJyZW50CiAgICAvLyAgICAgaWYgKCFzdGF0ZS5jYXB0dXJlVGltZXIpIHsKICAgIC8vICAgICAgICAgc3RhdGUuY2FwdHVyZVRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgLy8gICAgICAgICAgICAgc3RhdGUuY2FwdHVyZVRpbWVDdXJyZW50ICsrCiAgICAvLyAgICAgICAgIH0sIDEwMDApCiAgICAvLyAgICAgfQogICAgLy8gfSwKICAgIC8vIHN0b3BDYXB0dXJlVGltZXI6IGZ1bmN0aW9uKHN0YXRlKSB7CiAgICAvLyAgICAgY2xlYXJJbnRlcnZhbChzdGF0ZS5jYXB0dXJlVGltZXIpCiAgICAvLyAgICAgc3RhdGUuY2FwdHVyZVRpbWVMaW1pdCA9IG51bGwKICAgIC8vICAgICBzdGF0ZS5jYXB0dXJlVGltZUN1cnJlbnQgPSBudWxsCiAgICAvLyB9LAogICAgc2V0UmVwb3J0c0NvdW50OiBmdW5jdGlvbiBzZXRSZXBvcnRzQ291bnQoc3RhdGUsIHZhbHVlKSB7CiAgICAgIGlmICh2YWx1ZSA9PSAwKSB7CiAgICAgICAgdmFsdWUgPSBudWxsOwogICAgICB9CgogICAgICBzdGF0ZS5yZXBvcnRzQ291bnQgPSB2YWx1ZTsKICAgIH0sCiAgICBzZXRTdGF0dXNEaXNwbGF5U2hvdzogZnVuY3Rpb24gc2V0U3RhdHVzRGlzcGxheVNob3coc3RhdGUsIGlzU2hvdykgewogICAgICBzdGF0ZS5zdGF0dXNEaXNwbGF5U2hvdyA9IGlzU2hvdzsKICAgIH0sCiAgICBzZXRTdGF0dXNEaXNwbGF5OiBmdW5jdGlvbiBzZXRTdGF0dXNEaXNwbGF5KHN0YXRlLCBfcmVmOSkgewogICAgICB2YXIga2V5ID0gX3JlZjkua2V5LAogICAgICAgICAgdmFsdWUgPSBfcmVmOS52YWx1ZTsKICAgICAgc3RhdGUuc3RhdHVzRGlzcGxheXNba2V5XSA9IHZhbHVlOwogICAgfSwKICAgIHNldFVudGlsQ2FwdHVyZVRpbWVyOiBmdW5jdGlvbiBzZXRVbnRpbENhcHR1cmVUaW1lcihzdGF0ZSwgX3JlZjEwKSB7CiAgICAgIHZhciBtYXhUaW1lID0gX3JlZjEwLm1heFRpbWUsCiAgICAgICAgICBjdXJyZW50VGltZSA9IF9yZWYxMC5jdXJyZW50VGltZTsKICAgICAgc3RhdGUudW50aWxDYXB0dXJlVGltZXJNYXhUaW1lID0gbWF4VGltZTsKICAgICAgc3RhdGUudW50aWxDYXB0dXJlVGltZXJDdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lOwogICAgfSwKICAgIHNldFVudGlsQ2FwdHVyZVRpbWVyU2hvdzogZnVuY3Rpb24gc2V0VW50aWxDYXB0dXJlVGltZXJTaG93KHN0YXRlLCB2YWx1ZSkgewogICAgICBzdGF0ZS51bnRpbENhcHR1cmVUaW1lckVuYWJsZWQgPSB2YWx1ZTsKICAgIH0sCiAgICBzZXRVbnRpbENhcHR1cmVUaW1lck1lc3NhZ2U6IGZ1bmN0aW9uIHNldFVudGlsQ2FwdHVyZVRpbWVyTWVzc2FnZShzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUudW50aWxDYXB0dXJlVGltZXJNZXNzYWdlID0gdmFsdWU7CiAgICB9LAogICAgc2V0Tm90aWZpY2F0aW9uU2hvdzogZnVuY3Rpb24gc2V0Tm90aWZpY2F0aW9uU2hvdyhzdGF0ZSwgdGV4dCkgewogICAgICBzdGF0ZS5ub3RpZmljYXRpb25UZXh0ID0gdGV4dDsKICAgICAgc3RhdGUubm90aWZpY2F0aW9uU2hvdyA9IHRydWU7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIHN0YXRlLm5vdGlmaWNhdGlvblNob3cgPSBmYWxzZTsKICAgICAgfSwgMzAwMCk7CiAgICB9LAogICAgc2V0RHJpZnRTY29yZTogZnVuY3Rpb24gc2V0RHJpZnRTY29yZShzdGF0ZSwgdmFsdWUpIHsKICAgICAgc3RhdGUuZHJpZnRTY29yZSA9IHZhbHVlOwogICAgfSwKICAgIHNldFBoYXNlVGltZXI6IGZ1bmN0aW9uIHNldFBoYXNlVGltZXIoc3RhdGUsIHZhbHVlKSB7CiAgICAgIHN0YXRlLnBoYXNlVGltZXIuc2hvdyA9IHZhbHVlLnNob3c7CiAgICAgIHN0YXRlLnBoYXNlVGltZXIudGl0bGUgPSB2YWx1ZS50aXRsZTsKICAgICAgc3RhdGUucGhhc2VUaW1lci50aW1lID0gdmFsdWUudGltZTsKICAgIH0sCiAgICBzZXRSb3lhbEJhdHRsZVN0YXRzOiBmdW5jdGlvbiBzZXRSb3lhbEJhdHRsZVN0YXRzKHN0YXRlLCB2YWx1ZSkgewogICAgICBzdGF0ZS5waGFzZVRpbWVyLmFsaXZlID0gdmFsdWUuYWxpdmU7CiAgICAgIHN0YXRlLnBoYXNlVGltZXIua2lsbHMgPSB2YWx1ZS5raWxsczsKICAgIH0sCiAgICBzaG93V2luTm90aWZpY2F0aW9uOiBmdW5jdGlvbiBzaG93V2luTm90aWZpY2F0aW9uKHN0YXRlLCBfcmVmMTEpIHsKICAgICAgdmFyIG5hbWUgPSBfcmVmMTEubmFtZSwKICAgICAgICAgIGlkID0gX3JlZjExLmlkOwogICAgICBzdGF0ZS53aW5Ob3RpZmljYXRpb24ubmlja25hbWUgPSBuYW1lOwogICAgICBzdGF0ZS53aW5Ob3RpZmljYXRpb24uaXRlbUlkID0gaWQ7CiAgICAgIGlmIChzdGF0ZS53aW5Ob3RpZmljYXRpb24uc2hvdykgcmV0dXJuOwogICAgICBzdGF0ZS53aW5Ob3RpZmljYXRpb24uc2hvdyA9IHRydWU7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIHN0YXRlLndpbk5vdGlmaWNhdGlvbi5zaG93ID0gZmFsc2U7CiAgICAgIH0sIDgwMDApOwogICAgfSwKICAgIG9wZW5LZXk6IGZ1bmN0aW9uIG9wZW5LZXkoc3RhdGUsIGRhdGEpIHsKICAgICAgc3RhdGUucmVtb3RlQ29udHJvbGxlciA9IGRhdGE7CiAgICB9LAogICAgc2V0V2FyWm9uZVNob3c6IGZ1bmN0aW9uIHNldFdhclpvbmVTaG93KHN0YXRlLCB2YWx1ZSkgewogICAgICBzdGF0ZS53YXJab25lLnNob3cgPSB2YWx1ZTsKICAgIH0sCiAgICBzZXRIb2xlSW5mb3JtYXRpb246IGZ1bmN0aW9uIHNldEhvbGVJbmZvcm1hdGlvbihzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5ob2xlSW5mb3JtYXRpb24uc2hvdyA9IGRhdGEuc2hvdzsKICAgICAgc3RhdGUuaG9sZUluZm9ybWF0aW9uLml0ZW1JbmZvID0gZGF0YS5pdGVtSW5mbzsKICAgICAgc3RhdGUuaG9sZUluZm9ybWF0aW9uLnN0YXRlSW5mbyA9IGRhdGEuc3RhdGVJbmZvOwogICAgfQogIH0sCiAgYWN0aW9uczoge30sCiAgbW9kdWxlczogewogICAgd2FyRm9yRW50ZXJwcmljZTogd2FyRm9yRW50ZXJwcmljZQogIH0KfTs="},null]}