{"remainingRequest":"C:\\gta go\\Gui\\node_modules\\thread-loader\\dist\\cjs.js!C:\\gta go\\Gui\\node_modules\\babel-loader\\lib\\index.js!C:\\gta go\\Gui\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\gta go\\Gui\\src\\store\\smartphone\\modules\\message-page.js","dependencies":[{"path":"C:\\gta go\\Gui\\src\\store\\smartphone\\modules\\message-page.js","mtime":1629112495829},{"path":"C:\\gta go\\Gui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1685190017390},{"path":"C:\\gta go\\Gui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1685190017367},{"path":"C:\\gta go\\Gui\\node_modules\\babel-loader\\lib\\index.js","mtime":1685190019507},{"path":"C:\\gta go\\Gui\\node_modules\\eslint-loader\\index.js","mtime":1685190018634}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}