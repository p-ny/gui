{"remainingRequest":"C:\\gta go\\Gui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\gta go\\Gui\\src\\views\\CarTunningMenu\\components\\ColorPicker\\Saturation.vue?vue&type=style&index=0&id=9f73e240&lang=scss&scoped=true&","dependencies":[{"path":"C:\\gta go\\Gui\\src\\views\\CarTunningMenu\\components\\ColorPicker\\Saturation.vue","mtime":1607203922823},{"path":"C:\\gta go\\Gui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1685190019100},{"path":"C:\\gta go\\Gui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1685190024220},{"path":"C:\\gta go\\Gui\\node_modules\\postcss-loader\\src\\index.js","mtime":1685190021333},{"path":"C:\\gta go\\Gui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1685190017369},{"path":"C:\\gta go\\Gui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1685190017390},{"path":"C:\\gta go\\Gui\\node_modules\\vue-loader\\lib\\index.js","mtime":1685190022137}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5zYXR1cmF0aW9uIHsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KICBtYXJnaW46IDAgMC43cmVtIDAgMDsNCiAgY2FudmFzIHsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICB9DQogICZfX3NsaWRlIHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgbGVmdDogMTAwJTsNCiAgICB0b3A6IDA7DQogICAgd2lkdGg6IDAuOHJlbTsNCiAgICBoZWlnaHQ6IDAuOHJlbTsNCiAgICBib3JkZXItcmFkaXVzOiA1MCU7DQogICAgYm9yZGVyOiAwLjFyZW0gc29saWQgI2ZmZjsNCiAgICBib3gtc2hhZG93OiAwIDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMyk7DQogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQogIH0NCn0NCg=="},{"version":3,"sources":["Saturation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Saturation.vue","sourceRoot":"src/views/CarTunningMenu/components/ColorPicker","sourcesContent":["<template>\r\n  <div class=\"saturation\" @mousedown.prevent.stop=\"selectSaturation\">\r\n    <canvas ref=\"canvasSaturation\" />\r\n    <div class=\"saturation__slide\" :style=\"slideSaturationStyle\" ></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport mixin from './mixin'\r\n\r\nexport default {\r\n  name: 'Saturation',\r\n\r\n  mixins: [mixin],\r\n\r\n  props: {\r\n    color: {\r\n      type: String,\r\n      default: '#000000'\r\n    },\r\n    hsv: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    size: {\r\n      type: Number,\r\n    }\r\n  },\r\n\r\n  data: function() {\r\n    return {\r\n      slideSaturationStyle: {}\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    appWidthUnit: function () {\r\n      const appWidth = document.getElementById('app').offsetWidth / 100\r\n      const widthUnit = Math.ceil(appWidth)\r\n      return widthUnit\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    renderColor: function() {\r\n      const canvas = this.$refs.canvasSaturation\r\n      const size = this.size\r\n      const ctx = canvas.getContext('2d')\r\n      canvas.width = size\r\n      canvas.height = size\r\n\r\n      ctx.fillStyle = this.color\r\n      ctx.fillRect(0, 0, size, size)\r\n\r\n      this.createLinearGradient('l', ctx, size, size, '#FFFFFF', 'rgba(255,255,255,0)')\r\n      this.createLinearGradient('p', ctx, size, size, 'rgba(0,0,0,0)', '#000000')\r\n    },\r\n\r\n    renderSlide: function() {\r\n      this.slideSaturationStyle = {\r\n        left: this.hsv.s * this.size - (0.4 * this.appWidthUnit) + 'px',\r\n        top: (1 - this.hsv.v) * this.size - (0.4 * this.appWidthUnit) + 'px'\r\n      }\r\n    },\r\n\r\n    selectSaturation: function(e) {\r\n      const { top: saturationTop, left: saturationLeft } = this.$el.getBoundingClientRect()\r\n      const ctx = e.target.getContext('2d')\r\n\r\n      const mousemove = e => {\r\n        let x = e.clientX - saturationLeft\r\n        let y = e.clientY - saturationTop\r\n\r\n        if (x < 0) {\r\n            x = 0\r\n        }\r\n        if (y < 0) {\r\n            y = 0\r\n        }\r\n        if (x > this.size) {\r\n            x = this.size\r\n        }\r\n        if (y > this.size) {\r\n            y = this.size\r\n        }\r\n\r\n        this.slideSaturationStyle = {\r\n            left: x - (0.4 * this.appWidthUnit) + 'px',\r\n            top: y - (0.4 * this.appWidthUnit) + 'px'\r\n        }\r\n\r\n        const imgData = ctx.getImageData(Math.min(x, this.size - 1), Math.min(y, this.size - 1), 1, 1)\r\n        const [r, g, b] = imgData.data\r\n\r\n        this.$emit('selectSaturation', { r, g, b })\r\n      }\r\n\r\n      mousemove(e)\r\n\r\n      const mouseup = () => {\r\n        document.removeEventListener('mousemove', mousemove)\r\n        document.removeEventListener('mouseup', mouseup)\r\n      }\r\n\r\n      document.addEventListener('mousemove', mousemove)\r\n      document.addEventListener('mouseup', mouseup)\r\n    }\r\n  },\r\n\r\n  mounted: function() {\r\n    this.renderColor()\r\n    this.renderSlide()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.saturation {\r\n  position: relative;\r\n  margin: 0 0.7rem 0 0;\r\n  canvas {\r\n    vertical-align: top;\r\n  }\r\n  &__slide {\r\n    position: absolute;\r\n    left: 100%;\r\n    top: 0;\r\n    width: 0.8rem;\r\n    height: 0.8rem;\r\n    border-radius: 50%;\r\n    border: 0.1rem solid #fff;\r\n    box-shadow: 0 0 1px 1px rgba(0, 0, 0, 0.3);\r\n    pointer-events: none;\r\n  }\r\n}\r\n</style>\r\n"]}]}